datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

model Place {
    id   String @id @default(cuid())
    name String @db.Text

    packs Pack[]

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Pack {
    id   String @id @default(cuid())
    name String @db.Text

    placeId String?
    place   Place?  @relation(fields: [placeId], references: [id])

    stocks Stock[]

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model ExpiryDate {
    id   String         @id @default(cuid())
    type ExpiryDateType @default(SPECIFIC_DATE)
    date DateTime       @db.Date

    skus Sku[]

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Jan {
    code String @id @db.VarChar(14)

    queues Queue[]
    skus   Sku[]

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Sku {
    id    String  @id @default(cuid())
    title String
    note  String?

    janCode      String?     @db.VarChar(14)
    jan          Jan?        @relation(fields: [janCode], references: [code], onDelete: Cascade)
    expiryDateId String?
    expiryDate   ExpiryDate? @relation(fields: [expiryDateId], references: [id], onDelete: Cascade)
    categoryId   String?
    category     Category?   @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    stocks Stock[]

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Stock {
    id       String  @id @default(cuid())
    note     String?
    quantity Int     @default(0) @db.Integer

    packId String?
    pack   Pack?   @relation(fields: [packId], references: [id], onDelete: Cascade)
    skuId  String?
    sku    Sku?    @relation(fields: [skuId], references: [id], onDelete: Cascade)

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Queue {
    id String @id @default(cuid())

    janCode String @db.VarChar(14)
    jan     Jan    @relation(fields: [janCode], references: [code], onDelete: Cascade)

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

// master
model Category {
    id   String  @id @default(cuid())
    name String? @db.Text

    skus Sku[]

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

enum ExpiryDateType {
    SPECIFIC_DATE
    DURING_THE_MONTH
    DURING_THE_YEAR
}

// model Company {
//     id      String @id @default(cuid())
//     code    String @db.VarChar(10) @unique
//     name    String? @db.Text
// }

// model Country {
//     id        String   @id @default(cuid())
//     code      String   @unique @db.VarChar(2)
//     name      String
//     updatedAt DateTime @updatedAt
//     createdAt DateTime @default(now())
// }

// model Site {
//     id        String   @id @default(cuid())
//     name      String
//     updatedAt DateTime @updatedAt
//     createdAt DateTime @default(now())
// }

// scrape

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver,
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
